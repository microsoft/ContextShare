name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        vscode-version: ['1.90.0', 'stable']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint || echo "Lint script not found, skipping"

    - name: Build extension
      run: npm run build

    - name: Run tests
      run: npm test

    - name: Check for TypeScript errors
      run: npx tsc --noEmit

  build-vsix:
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build extension
      run: npm run build

    - name: Run tests
      run: npm test

    - name: Package VSIX
      run: pwsh -File ./build_vsix.ps1
      shell: pwsh

    - name: Upload VSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: vsix-package
        path: '*.vsix'
        retention-days: 30

    - name: Create Release (Main branch only)
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.PACKAGE_VERSION }}
        name: Release v${{ env.PACKAGE_VERSION }}
        draft: false
        prerelease: false
        files: '*.vsix'
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGE_VERSION: ${{ steps.version.outputs.version }}

  version-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from package.json
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Check manifest version sync
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        MANIFEST_VERSION=$(grep -Po 'Version="\K[^"]*' vsix/extension.vsixmanifest)
        if [ "$PACKAGE_VERSION" != "$MANIFEST_VERSION" ]; then
          echo "Version mismatch: package.json=$PACKAGE_VERSION, manifest=$MANIFEST_VERSION"
          exit 1
        fi
        echo "Versions are synchronized: $PACKAGE_VERSION"
