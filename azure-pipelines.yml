# Azure Pipeline for Component Governance
# This pipeline is required for Microsoft open source projects to ensure component compliance
# See: https://docs.opensource.microsoft.com/using/#requirements-for-using-open-source

trigger:
- main
- develop

pool:
  vmImage: 'ubuntu-22.04'

variables:
  # Disable telemetry for privacy compliance
  DOTNET_CLI_TELEMETRY_OPTOUT: 'true'
  POWERSHELL_TELEMETRY_OPTOUT: 'true'

steps:
- task: NodeTool@0
  displayName: 'Install Node.js'
  inputs:
    versionSpec: '20.x'

# Component Detection is automatically injected by Microsoft's Azure DevOps organization
# This step ensures Component Governance registration for all dependencies
- task: ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  inputs:
    scanType: 'Register'
    verbosity: 'Verbose'
    alertWarningLevel: 'High'
    failOnAlert: false  # Set to true after resolving initial alerts

# Optional: Run additional security checks
- script: npm ci
  displayName: 'Install dependencies'

- script: npm run security:audit
  displayName: 'Security audit'
  continueOnError: true

- script: npm run license:check
  displayName: 'License compliance check'

# Build and test to ensure package is functional
- script: npm run build
  displayName: 'Build extension'

- script: |
    sudo apt-get update
    sudo apt-get install -y \
      xvfb \
      ca-certificates \
      fonts-liberation \
      libasound2t64 \
      libatk-bridge2.0-0 \
      libatk1.0-0 \
      libcairo2 \
      libcups2 \
      libdbus-1-3 \
      libexpat1 \
      libfontconfig1 \
      libgbm1 \
      libgconf-2-4 \
      libgdk-pixbuf2.0-0 \
      libglib2.0-0 \
      libgtk-3-0 \
      libnspr4 \
      libnss3 \
      libpango-1.0-0 \
      libpangocairo-1.0-0 \
      libx11-6 \
      libx11-xcb1 \
      libxcb1 \
      libxcomposite1 \
      libxcursor1 \
      libxdamage1 \
      libxext6 \
      libxfixes3 \
      libxi6 \
      libxrandr2 \
      libxrender1 \
      libxss1 \
      libxtst6 \
      lsb-release \
      wget \
      xdg-utils
  displayName: 'Install Linux dependencies'

- script: |
    # Run tests with xvfb-run and proper environment variables
    xvfb-run -a npm test
  displayName: 'Run tests'
  env:
    ELECTRON_DISABLE_SANDBOX: '1'
    ELECTRON_NO_SANDBOX: '1'
    ELECTRON_EXTRA_LAUNCH_ARGS: '--disable-gpu --disable-software-rasterizer --disable-dev-shm-usage'

# Archive Component Governance results
- task: PublishBuildArtifacts@1
  displayName: 'Publish CG results'
  inputs:
    PathtoPublish: '$(Agent.BuildDirectory)'
    ArtifactName: 'ComponentGovernance'
  condition: always()
